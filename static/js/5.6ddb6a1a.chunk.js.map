{"version":3,"sources":["pages/ChatPage.tsx"],"names":["TextArea","Input","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messageAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","React","memo","width","src","photo","alt","userName","setMessage","onChange","value","disabled","length","onClick","sendMessage","ChatPage"],"mappings":"0LAUQA,EAAaC,IAAbD,SAMFE,EAAiB,WACnB,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,CAACR,IAGA,gCACgB,UAAXE,GAAsB,2DACvB,gCACI,cAACO,EAAD,IACA,cAACC,EAAD,WAMVD,EAAqB,WACvB,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAmBC,iBAAuB,MAChD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAV,qBAAU,WACa,IAAD,EAAdS,IACA,UAAAH,EAAiBK,eAAjB,SAA0BC,eAAe,CAAEC,SAAU,cAE1D,CAACJ,EAAcJ,IAGd,sBAAKS,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAhBlC,SAACC,GACnB,IAAIC,EAAUD,EAAEE,cACZD,EAAQE,aAAeF,EAAQG,YAAcH,EAAQI,aACrDb,GAAgB,GAEhBA,GAAgB,IAWpB,UACKL,EAASmB,KAAI,SAACC,GAAD,OACV,cAACC,EAAD,CAASC,QAASF,GAAQA,EAAEG,OAEhC,qBAAKC,IAAKvB,QAKhBoB,EAAkDI,IAAMC,MAAK,YAAkB,IAAfJ,EAAc,EAAdA,QAClE,OACI,gCACI,qBAAKb,MAAO,CAAEkB,MAAO,QAAUC,IAAKN,EAAQO,MAAOC,IAAI,QACvD,iCAASR,EAAQS,WACjB,uBACCT,EAAQA,QACT,6BAKNvB,EAA2B,WAC7B,MAA8BI,mBAAiB,IAA/C,mBAAOmB,EAAP,KAAgBU,EAAhB,KACMzC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UACzDF,EAAWC,cASjB,OACI,gCACI,cAACJ,EAAD,CAAU+C,SAAU,SAACpB,GAAD,OAAOmB,EAAWnB,EAAEE,cAAcmB,QAAQA,MAAOZ,IACrE,cAAC,IAAD,CAAQa,SAAqB,UAAX5C,IAAuB+B,EAAQc,OAAQC,QAVtC,WACnBf,EAAQc,SACR/C,EAASiD,YAAYhB,IACrBU,EAAW,MAOX,sBAOGO,UA3FY,WACvB,OAAO,cAACnD,EAAD","file":"static/js/5.6ddb6a1a.chunk.js","sourcesContent":["import { Input, Button } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    ChatMessageType,\n    sendMessage,\n    startMessagesListening,\n    stopMessagesListening\n} from '../redux/chat-reducer';\nimport { AppStateType } from '../redux/redux-store';\nconst { TextArea } = Input;\n\nconst ChatPage: React.FC = () => {\n    return <Chat />;\n};\n\nconst Chat: React.FC = () => {\n    const dispatch = useDispatch();\n\n    const status = useSelector((state: AppStateType) => state.chat.status);\n\n    useEffect(() => {\n        dispatch(startMessagesListening());\n        return () => {\n            dispatch(stopMessagesListening());\n        };\n    }, [dispatch]);\n\n    return (\n        <div>\n            {status === 'error' && <div>Disconnect, restart page</div>}\n            <div>\n                <Messages />\n                <AddMessageForm />\n            </div>\n        </div>\n    );\n};\n\nconst Messages: React.FC = () => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages);\n    const messageAnchorRef = useRef<HTMLDivElement>(null);\n    const [isAutoScroll, setIsAutoScroll] = useState(true);\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        let element = e.currentTarget;\n        if (element.scrollHeight - element.scrollTop !== element.clientHeight) {\n            setIsAutoScroll(false);\n        } else {\n            setIsAutoScroll(true);\n        }\n    };\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messageAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\n        }\n    }, [isAutoScroll, messages]);\n\n    return (\n        <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\n            {messages.map((m: ChatMessageType) => (\n                <Message message={m} key={m.id} />\n            ))}\n            <div ref={messageAnchorRef}></div>\n        </div>\n    );\n};\n\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(({ message }) => {\n    return (\n        <div>\n            <img style={{ width: '30px' }} src={message.photo} alt=\"msg\" />\n            <strong>{message.userName}</strong>\n            <br />\n            {message.message}\n            <hr />\n        </div>\n    );\n});\n\nconst AddMessageForm: React.FC = () => {\n    const [message, setMessage] = useState<string>('');\n    const status = useSelector((state: AppStateType) => state.chat.status);\n    const dispatch = useDispatch();\n\n    const sendMessageHendler = () => {\n        if (message.length) {\n            dispatch(sendMessage(message));\n            setMessage('');\n        }\n    };\n\n    return (\n        <div>\n            <TextArea onChange={(e) => setMessage(e.currentTarget.value)} value={message} />\n            <Button disabled={status !== 'ready' || !message.length} onClick={sendMessageHendler}>\n                Send\n            </Button>\n        </div>\n    );\n};\n\nexport default ChatPage;\n"],"sourceRoot":""}