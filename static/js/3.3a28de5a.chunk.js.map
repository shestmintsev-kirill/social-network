{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileDescriptionForm.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Post","props","className","s","item","src","alt","message","likesCount","PostForm","formik","useFormik","initialValues","post","onSubmit","values","resetForm","addNewPost","handleSubmit","name","onBlur","handleBlur","onChange","handleChange","value","placeholder","disabled","dirty","type","MyPosts","postsElements","posts","map","p","i","postsBlock","addPost","connect","state","profilePage","newPostText","actions","Contacts","contacts","errors","console","log","err","e","split","replace","toLowerCase","Object","keys","contact","title","isError","some","ProfileDescriptionForm","profile","closeEditMode","updateProfile","authorizedUserId","examValue","length","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","facebook","github","instagram","mainLink","twitter","vk","website","youtube","a","userId","checked","index","style","color","ProfileStatus","status","isOwner","updateStatus","x","useState","editMode","setEditMode","profileStatus","setStatus","useEffect","target","autoFocus","onDoubleClick","ProfileDescription","goToEditMode","profileContacts","entries","onClick","ProfileInfo","savePhoto","avatar","photos","large","accept","files","Preloader","Profile","MyPostsContainer","ProfileContainer","this","match","params","getUserProfile","getStatus","history","push","refreshProfile","oldProps","React","Component","compose","auth","isAuth","withRouter"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,oBCAzBD,EAAOC,QAAU,CAAC,OAAS,8B,yKCkBZC,EAZmB,SAACC,GAC/B,OACI,sBAAKC,UAAWC,IAAEC,KAAlB,UACI,qBAAKC,IAAI,wDAAwDC,IAAI,SACpEL,EAAMM,QACP,gCACI,wCADJ,IACuBN,EAAMO,kBCyBnCC,EAAwC,SAACR,GAC3C,IAAMS,EAASC,YAAU,CACrBC,cAAe,CACXC,KAAM,IAEVC,SAAU,SAACC,EAAD,GAA4C,IAAjBC,EAAgB,EAAhBA,UACjCf,EAAMgB,WAAWF,GACjBC,OAIR,OACI,uBAAMF,SAAUJ,EAAOQ,aAAvB,UACI,cAAC,IAAD,CACIC,KAAM,OACNC,OAAQV,EAAOW,WACfC,SAAUZ,EAAOa,aACjBC,MAAOd,EAAOK,OAAOF,KACrBY,YAAa,oBAEjB,8BACI,wBAAQC,UAAWhB,EAAOiB,MAAOC,KAAM,SAAvC,4BAQDC,EAxD6B,SAAC5B,GACzC,IAAM6B,EAAgB7B,EAAM8B,MAAMC,KAAI,SAACC,EAAaC,GAAd,OAClC,cAAC,EAAD,CAAM3B,QAAS0B,EAAE1B,QAASC,WAAYyB,EAAEzB,YAAiB0B,MAM7D,OACI,sBAAKhC,UAAWC,IAAEgC,WAAlB,UACI,0CACA,8BACI,cAAC,EAAD,CAAUlB,WAPH,SAACF,GAChBd,EAAMmC,QAAQrB,EAAOF,WAQjB,qBAAKX,UAAWC,IAAE4B,MAAlB,SAA0BD,QCHvBO,eAhBS,SAACC,GACrB,MAAO,CACHP,MAAOO,EAAMC,YAAYR,MACzBS,YAAaF,EAAMC,YAAYC,eAaiE,CACpGJ,QAASK,IAAQL,SADNC,CAEZR,G,+CCmFGa,EAAwC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAUrB,EAAuB,EAAvBA,SAAUsB,EAAa,EAAbA,OACjEC,QAAQC,IAAIH,EAAUrB,EAAUsB,GAChC,IAAMG,EAAMH,EAAOZ,KAAI,SAACgB,GACpB,OAAOA,EAAEC,MAAM,MAAM,GAAGC,QAAQ,IAAK,IAAIC,iBAG7C,OACI,8BACKC,OAAOC,KAAKV,GAAUX,KAAI,SAACsB,GAAD,OACvB,cAAC,IAAD,CAEIC,MAAOD,EACPE,QAAST,EAAIU,MAAK,SAACT,GAAD,OAAeA,IAAMM,EAAQH,iBAC/ChC,KAAI,mBAAcmC,GAClBhC,SAAUA,EACVE,MAAOmB,EAASW,GAChB7B,YAAa6B,GANRA,SAaVI,EA9G2D,SAAC,GAMpE,IALHC,EAKE,EALFA,QACAC,EAIE,EAJFA,cACAC,EAGE,EAHFA,cACAC,EAEE,EAFFA,iBACAlB,EACE,EADFA,OAEMmB,EAAY,SAACvC,GACf,OAAOA,EAAMwC,OAASxC,EAAQ,IAG5Bd,EAASC,YAAU,CACrBC,cAAe,CACXqD,SAAUN,EAAQM,SAClBC,QAASH,EAAUJ,EAAQO,SAC3BC,eAAgBR,EAAQQ,eACxBC,0BAA2BL,EAAUJ,EAAQS,2BAC7CzB,SAAU,CACN0B,SAAUN,EAAUJ,EAAQhB,SAAS0B,UACrCC,OAAQP,EAAUJ,EAAQhB,SAAS2B,QACnCC,UAAWR,EAAUJ,EAAQhB,SAAS4B,WACtCC,SAAUT,EAAUJ,EAAQhB,SAAS6B,UACrCC,QAASV,EAAUJ,EAAQhB,SAAS8B,SACpCC,GAAIX,EAAUJ,EAAQhB,SAAS+B,IAC/BC,QAASZ,EAAUJ,EAAQhB,SAASgC,SACpCC,QAASb,EAAUJ,EAAQhB,SAASiC,WAG5C9D,SAAS,WAAD,4BAAE,WAAOC,GAAP,SAAA8D,EAAA,sEACAhB,EAAc,2BAAK9C,GAAN,IAAc+D,OAAQhB,KADnC,OAENF,IAFM,2CAAF,mDAAC,KAMb,OACI,uBAAM9C,SAAUJ,EAAOQ,aAAvB,UACI,cAAC,IAAD,CACIqC,MAAO,qBACPpC,KAAM,WACNG,SAAUZ,EAAOa,aACjBC,MAAOd,EAAOK,OAAOkD,SACrBxC,YAAa,aAEjB,cAAC,IAAD,CACI8B,MAAO,wCACPpC,KAAM,UACNG,SAAUZ,EAAOa,aACjBC,MAAOd,EAAOK,OAAOmD,QACrBzC,YAAa,YAEjB,uBACIN,KAAM,iBACN4D,QAASrE,EAAOK,OAAOoD,eACvB7C,SAAUZ,EAAOa,aACjBK,KAAM,aACP,IApBP,oBAsBKlB,EAAOK,OAAOoD,gBACX,cAAC,IAAD,CACIZ,MAAO,gJACPpC,KAAM,4BACNG,SAAUZ,EAAOa,aACjBC,MAAOd,EAAOK,OAAOqD,0BACrB3C,YAAa,kCAGrB,cAAC,EAAD,CAAUkB,SAAUjC,EAAOK,OAAO4B,SAAUrB,SAAUZ,EAAOa,aAAcqB,OAAQA,IACnF,8BACI,wBAAQhB,KAAM,SAAd,sBAEDgB,EAAOoB,QACNpB,EAAOZ,KAAI,SAACe,EAAaiC,GAAd,OACP,sBAAiBC,MAAO,CAAEC,MAAO,OAAjC,UACI,4EACCnC,IAFKiC,U,2BClCfG,EAhD4B,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,OAAuD,IAA/CC,eAA+C,aAA9BC,oBAA8B,MAAf,SAACC,GAAD,OAAOA,GAAQ,EACjG,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAmCF,mBAASJ,GAA5C,mBAAOO,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WACND,EAAUR,KACX,CAACA,IAkBJ,OACI,8BACKK,EACG,wEACY,IACR,cAAC,IAAD,CACInE,SAVG,SAAC0B,GACpB4C,EAAU5C,EAAE8C,OAAOtE,QAUHJ,OAhBO,WACvBsE,GAAY,GACZJ,EAAaK,IAeGI,WAAS,EACTnE,KAAK,OACLJ,MAAOmE,OAIf,8BACI,uBAAMK,cA/BG,WAChBX,GAGLK,GAAY,IA2BA,UACI,2EADJ,IAC8BN,GAAU,wECgCtDa,EAA4D,SAAC,GAAwC,IAAtCtC,EAAqC,EAArCA,QAAS0B,EAA4B,EAA5BA,QAASa,EAAmB,EAAnBA,aAC7EC,EAAkB/C,OAAOgD,QAAP,OAAezC,QAAf,IAAeA,OAAf,EAAeA,EAAShB,UAAUX,KAAI,SAACsB,EAAwB0B,GACnF,QAAO1B,EAAQ,IACX,+BACI,mCAASA,EAAQ,GAAjB,QACCA,EAAQ,KAFJ0B,MASjB,OACI,iCACKK,GAAW,wBAAQgB,QAASH,EAAjB,0BACZ,8BACI,yDADJ,WAC2BvC,QAD3B,IAC2BA,OAD3B,EAC2BA,EAASM,aAE5B,OAAPN,QAAO,IAAPA,OAAA,EAAAA,EAASO,UACN,8BACI,6EADJ,OAEKP,QAFL,IAEKA,OAFL,EAEKA,EAASO,YAGV,OAAPP,QAAO,IAAPA,OAAA,EAAAA,EAASQ,iBACN,8BACI,wHADJ,OAEKR,QAFL,IAEKA,OAFL,EAEKA,EAASS,6BAGjB,6BAAK+B,QAKHG,EAnGqC,SAAC,GAS9C,IAAD,EARF3C,EAQE,EARFA,QACAyB,EAOE,EAPFA,OACAE,EAME,EANFA,aACAD,EAKE,EALFA,QACAkB,EAIE,EAJFA,UACA1C,EAGE,EAHFA,cACAC,EAEE,EAFFA,iBACAlB,EACE,EADFA,OAEA,EAAgC4C,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAEAG,qBAAU,WACFjD,EAAOoB,QACP0B,GAAY,KAEjB,CAAC9C,EAAQkB,IAQZ,OAAKH,EAKD,gCACI,sBAAKzD,UAAWC,IAAEqG,OAAlB,UACI,qBACInG,KACW,OAAPsD,QAAO,IAAPA,GAAA,UAAAA,EAAS8C,cAAT,eAAiBC,QACjB,2FAEJpG,IAAI,WAEP+E,GAAWI,GACR,uBAAO7D,KAAM,OAAQ+E,OAAO,oBAAoBrF,SArBpC,SAAC0B,GAAsC,IAAD,GAC9D,UAAIA,EAAE8C,OAAOc,aAAb,aAAI,EAAgB5C,SAChBuC,EAAUvD,EAAE8C,OAAOc,MAAM,UAsBvBnB,EAGE,cAAC,EAAD,CACI7C,OAAQA,EACRkB,iBAAkBA,EAClBD,cAAeA,EACfF,QAASA,EACTC,cAAe,kBAAM8B,GAAY,MAPrC,cAAC,EAAD,CAAoB/B,QAASA,EAAS0B,QAASA,EAASa,aAAc,kBAAMR,GAAY,MAU5F,cAAC,EAAD,CAAeN,OAAQA,EAAQE,aAAcA,EAAcD,QAASA,OA5BjE,cAACwB,EAAA,EAAD,KCTAC,EAlBsB,SAAC7G,GAClC,OACI,gCACI,cAAC,EAAD,CACIoF,QAASpF,EAAMoF,QACf1B,QAAS1D,EAAM0D,QACfyB,OAAQnF,EAAMmF,OACdE,aAAcrF,EAAMqF,aACpBiB,UAAWtG,EAAMsG,UACjB1C,cAAe5D,EAAM4D,cACrBC,iBAAkB7D,EAAM6D,iBACxBlB,OAAQ3C,EAAM2C,SAElB,cAACmE,EAAD,Q,gBCENC,E,oKACF,WAAkB,IAAD,EACPlC,EAAM,UAAGmC,KAAKhH,MAAMiH,MAAMC,OAAOrC,cAA3B,QAAqCmC,KAAKhH,MAAM6D,iBACvDgB,GAGDmC,KAAKhH,MAAMmH,eAAetC,GAC1BmC,KAAKhH,MAAMoH,UAAUvC,IAHrBmC,KAAKhH,MAAMqH,QAAQC,KAAK,Y,+BAOhC,WACIN,KAAKO,mB,gCAGT,SAAmBC,GACXR,KAAKhH,MAAMiH,MAAMC,OAAOrC,SAAW2C,EAASP,MAAMC,OAAOrC,QACzDmC,KAAKO,mB,oBAIb,WACI,OACI,cAAC,EAAD,CACInC,SAAU4B,KAAKhH,MAAMiH,MAAMC,OAAOrC,OAClCnB,QAASsD,KAAKhH,MAAM0D,QACpByB,OAAQ6B,KAAKhH,MAAMmF,OACnBE,aAAc2B,KAAKhH,MAAMqF,aACzBiB,UAAWU,KAAKhH,MAAMsG,UACtB1C,cAAeoD,KAAKhH,MAAM4D,cAC1BC,iBAAkBmD,KAAKhH,MAAM6D,iBAC7BlB,OAAQqE,KAAKhH,MAAM2C,a,GA/BJ8E,IAAMC,WA+CtBC,sBACXvF,aAXoB,SAACC,GACrB,MAAO,CACHqB,QAASrB,EAAMC,YAAYoB,QAC3ByB,OAAQ9C,EAAMC,YAAY6C,OAC1BtB,iBAAkBxB,EAAMuF,KAAK/C,OAC7BgD,OAAQxF,EAAMuF,KAAKC,OACnBlF,OAAQN,EAAMC,YAAYK,UAKL,CAAEwE,mBAAgBC,cAAW/B,iBAAciB,cAAW1C,oBAC/EkE,IAFWH,CAGbZ","file":"static/js/3.3a28de5a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3BStp\",\"posts\":\"MyPosts_posts__2Eaxb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1myGU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__1Tzcz\"};","import s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string;\r\n    likesCount: number;\r\n};\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn-icons-png.flaticon.com/512/149/149071.png\" alt=\"user\" />\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import { useFormik } from 'formik';\r\nimport { PostType } from '../../../types/types';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>;\r\n    newPostText: string;\r\n    addPost: (post: string) => void;\r\n};\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n    const postsElements = props.posts.map((p: PostType, i: number) => (\r\n        <Post message={p.message} likesCount={p.likesCount} key={i} />\r\n    ));\r\n\r\n    const addNewPost = (values: PostFormValues) => {\r\n        props.addPost(values.post);\r\n    };\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostForm addNewPost={addNewPost} />\r\n            </div>\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype PostFormValues = {\r\n    post: string;\r\n};\r\n\r\ntype PostFormPropsType = {\r\n    addNewPost: (values: PostFormValues) => void;\r\n};\r\n\r\nconst PostForm: React.FC<PostFormPropsType> = (props) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: '',\r\n        },\r\n        onSubmit: (values: PostFormValues, { resetForm }) => {\r\n            props.addNewPost(values);\r\n            resetForm();\r\n        },\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <Textarea\r\n                name={'post'}\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.post}\r\n                placeholder={'Enter your post'}\r\n            />\r\n            <div>\r\n                <button disabled={!formik.dirty} type={'submit'}>\r\n                    Add post\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MyPosts;\r\n","import { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types/types';\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText,\r\n    };\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostType>;\r\n    newPostText: string;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (post: string) => void;\r\n};\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, unknown, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPost,\r\n})(MyPosts);\r\n","import { useFormik } from 'formik';\nimport { ContactsType, ProfileType } from '../../../types/types';\nimport { BaseInput, InputLow } from '../../common/FormsControls/FormsControls';\n\ntype ProfileDescriptionFormPropsType = {\n    profile: ProfileType;\n    authorizedUserId: number;\n    errors: Array<string>;\n    updateProfile: (payload: ProfileType) => void;\n    closeEditMode: () => void;\n};\n\ntype ProfileDescriptionFormValuesType = {\n    fullName: string;\n    aboutMe: string;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    contacts: ContactsType;\n};\n\nconst ProfileDescriptionForm: React.FC<ProfileDescriptionFormPropsType> = ({\n    profile,\n    closeEditMode,\n    updateProfile,\n    authorizedUserId,\n    errors\n}) => {\n    const examValue = (value: string) => {\n        return value.length ? value : '';\n    };\n\n    const formik = useFormik({\n        initialValues: {\n            fullName: profile.fullName,\n            aboutMe: examValue(profile.aboutMe),\n            lookingForAJob: profile.lookingForAJob,\n            lookingForAJobDescription: examValue(profile.lookingForAJobDescription),\n            contacts: {\n                facebook: examValue(profile.contacts.facebook),\n                github: examValue(profile.contacts.github),\n                instagram: examValue(profile.contacts.instagram),\n                mainLink: examValue(profile.contacts.mainLink),\n                twitter: examValue(profile.contacts.twitter),\n                vk: examValue(profile.contacts.vk),\n                website: examValue(profile.contacts.website),\n                youtube: examValue(profile.contacts.youtube)\n            }\n        },\n        onSubmit: async (values: ProfileDescriptionFormValuesType) => {\n            await updateProfile({ ...values, userId: authorizedUserId });\n            closeEditMode();\n        }\n    });\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <BaseInput\n                title={'Имя'}\n                name={'fullName'}\n                onChange={formik.handleChange}\n                value={formik.values.fullName}\n                placeholder={'fullName'}\n            />\n            <BaseInput\n                title={'Обо мне'}\n                name={'aboutMe'}\n                onChange={formik.handleChange}\n                value={formik.values.aboutMe}\n                placeholder={'aboutMe'}\n            />\n            <input\n                name={'lookingForAJob'}\n                checked={formik.values.lookingForAJob}\n                onChange={formik.handleChange}\n                type={'checkbox'}\n            />{' '}\n            looking For A Job\n            {formik.values.lookingForAJob && (\n                <BaseInput\n                    title={'Описание для поиска работы'}\n                    name={'lookingForAJobDescription'}\n                    onChange={formik.handleChange}\n                    value={formik.values.lookingForAJobDescription}\n                    placeholder={'looking For A Job Description'}\n                />\n            )}\n            <Contacts contacts={formik.values.contacts} onChange={formik.handleChange} errors={errors} />\n            <div>\n                <button type={'submit'}>Send</button>\n            </div>\n            {!!errors.length &&\n                errors.map((err: string, index: number) => (\n                    <div key={index} style={{ color: 'red' }}>\n                        <strong>Ошибка: </strong>\n                        {err}\n                    </div>\n                ))}\n        </form>\n    );\n};\n\ntype ContactsPropsType = {\n    contacts: any;\n    onChange: any;\n    errors: Array<string>;\n};\n\nconst Contacts: React.FC<ContactsPropsType> = ({ contacts, onChange, errors }) => {\n    console.log(contacts, onChange, errors);\n    const err = errors.map((e: string) => {\n        return e.split('->')[1].replace(')', '').toLowerCase();\n    });\n\n    return (\n        <div>\n            {Object.keys(contacts).map((contact) => (\n                <InputLow\n                    key={contact}\n                    title={contact}\n                    isError={err.some((e: string) => e === contact.toLowerCase())}\n                    name={`contacts.${contact}`}\n                    onChange={onChange}\n                    value={contacts[contact]}\n                    placeholder={contact}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default ProfileDescriptionForm;\n","import React, { useEffect, useState } from 'react';\nimport { Input } from 'antd';\n\n// import s from './ProfileInfo.module.css';\n\ntype PropsType = {\n    status: string;\n    isOwner?: boolean;\n    updateStatus?: (status: string) => void;\n};\nconst ProfileStatus: React.FC<PropsType> = ({ status, isOwner = false, updateStatus = (x) => x }) => {\n    const [editMode, setEditMode] = useState(false);\n    const [profileStatus, setStatus] = useState(status);\n\n    useEffect(() => {\n        setStatus(status);\n    }, [status]);\n\n    const activateEditMode = () => {\n        if (!isOwner) {\n            return;\n        }\n        setEditMode(true);\n    };\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        updateStatus(profileStatus);\n    };\n\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.target.value);\n    };\n\n    return (\n        <div>\n            {editMode ? (\n                <div>\n                    Статус:{' '}\n                    <Input\n                        onChange={onStatusChange}\n                        onBlur={deactivateEditMode}\n                        autoFocus\n                        type=\"text\"\n                        value={profileStatus}\n                    />\n                </div>\n            ) : (\n                <div>\n                    <span onDoubleClick={activateEditMode}>\n                        <strong>Статус:</strong> {status || 'Нет статуса'}\n                    </span>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ProfileStatus;\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { ProfileType } from '../../../types/types';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileDescriptionForm from './ProfileDescriptionForm';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType;\r\n    status: string;\r\n    isOwner: boolean;\r\n    authorizedUserId: number;\r\n    errors: Array<string>;\r\n    updateStatus: (status: string) => void;\r\n    savePhoto: (file: File) => void;\r\n    updateProfile: (payload: ProfileType) => void;\r\n};\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n    profile,\r\n    status,\r\n    updateStatus,\r\n    isOwner,\r\n    savePhoto,\r\n    updateProfile,\r\n    authorizedUserId,\r\n    errors,\r\n}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (errors.length) {\r\n            setEditMode(true);\r\n        }\r\n    }, [errors, authorizedUserId]);\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Preloader />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <img\r\n                    src={\r\n                        profile?.photos?.large ||\r\n                        'https://www.kindpng.com/picc/m/130-1300217_user-icon-member-icon-png-transparent-png.png'\r\n                    }\r\n                    alt=\"avatar\"\r\n                />\r\n                {isOwner && editMode && (\r\n                    <input type={'file'} accept=\".png, .jpg, .jpeg\" onChange={onMainPhotoSelected} />\r\n                )}\r\n            </div>\r\n            {!editMode ? (\r\n                <ProfileDescription profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)} />\r\n            ) : (\r\n                <ProfileDescriptionForm\r\n                    errors={errors}\r\n                    authorizedUserId={authorizedUserId}\r\n                    updateProfile={updateProfile}\r\n                    profile={profile}\r\n                    closeEditMode={() => setEditMode(false)}\r\n                />\r\n            )}\r\n            <ProfileStatus status={status} updateStatus={updateStatus} isOwner={isOwner} />\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDescriptionPropsType = {\r\n    profile: ProfileType;\r\n    isOwner: boolean;\r\n    goToEditMode: () => void;\r\n};\r\n\r\nconst ProfileDescription: React.FC<ProfileDescriptionPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n    const profileContacts = Object.entries(profile?.contacts).map((contact: Array<string>, index: number) => {\r\n        return contact[1] ? (\r\n            <li key={index}>\r\n                <strong>{contact[0]}: </strong>\r\n                {contact[1]}\r\n            </li>\r\n        ) : (\r\n            false\r\n        );\r\n    });\r\n\r\n    return (\r\n        <form>\r\n            {isOwner && <button onClick={goToEditMode}>Edit profile</button>}\r\n            <p>\r\n                <strong>Имя:</strong> {profile?.fullName}\r\n            </p>\r\n            {profile?.aboutMe && (\r\n                <p>\r\n                    <strong>Обо мне: </strong>\r\n                    {profile?.aboutMe}\r\n                </p>\r\n            )}\r\n            {profile?.lookingForAJob && (\r\n                <p>\r\n                    <strong>В поиске работы: </strong>\r\n                    {profile?.lookingForAJobDescription}\r\n                </p>\r\n            )}\r\n            {<ul>{profileContacts}</ul>}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","// import s from './Profile.module.css';\r\nimport { ProfileType } from '../../types/types';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n    authorizedUserId: number;\r\n    errors: Array<string>;\r\n    isOwner: boolean;\r\n    profile: ProfileType;\r\n    status: string;\r\n    updateStatus: (status: string) => void;\r\n    savePhoto: (file: File) => void;\r\n    updateProfile: (payload: ProfileType) => void;\r\n};\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                updateProfile={props.updateProfile}\r\n                authorizedUserId={props.authorizedUserId}\r\n                errors={props.errors}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, updateProfile } from '../../redux/profile-reducer';\r\nimport { withRouter, RouteComponentProps } from 'react-router';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType;\r\n    status: string;\r\n    authorizedUserId: number;\r\n    isAuth: boolean;\r\n    errors: Array<string>;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (id: string) => void;\r\n    getStatus: (id: string) => void;\r\n    updateStatus: (status: string) => void;\r\n    savePhoto: (file: File) => void;\r\n    updateProfile: (payload: ProfileType) => void;\r\n};\r\n\r\ntype PathParamsType = {\r\n    userId: string;\r\n};\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        const userId = this.props.match.params.userId ?? this.props.authorizedUserId;\r\n        if (!userId) {\r\n            this.props.history.push('/login');\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(oldProps: PropsType) {\r\n        if (this.props.match.params.userId !== oldProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                isOwner={!this.props.match.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                updateProfile={this.props.updateProfile}\r\n                authorizedUserId={this.props.authorizedUserId}\r\n                errors={this.props.errors}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n        errors: state.profilePage.errors,\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, updateProfile }),\r\n    withRouter,\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}