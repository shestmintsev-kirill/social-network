{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileDescriptionForm.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","Hooks/useInput.ts","components/Profile/ProfileInfo/ProfileInfo.tsx","pages/Profile.tsx"],"names":["module","exports","Post","props","useState","likesCount","likes","setLikes","dislikes","setDislikes","action","setAction","userPhoto","useSelector","state","profilePage","profile","photos","large","userName","fullName","actions","title","onClick","prev","LikeFilled","LikeOutlined","className","DislikeFilled","DislikeOutlined","author","avatar","src","mockPhoto","alt","content","message","datetime","moment","format","fromNow","PostForm","dispatch","useDispatch","formik","useFormik","initialValues","post","onSubmit","values","resetForm","addPost","handleSubmit","name","onBlur","handleBlur","onChange","handleChange","value","placeholder","disabled","dirty","htmlType","MyPosts","postsElements","posts","map","p","i","s","postsBlock","active","style","position","bottom","Contacts","contacts","err","errors","e","split","replace","toLowerCase","Object","keys","contact","isError","some","ProfileDescriptionForm","closeEditMode","authorizedUserId","aboutMe","lookingForAJob","lookingForAJobDescription","facebook","github","instagram","mainLink","twitter","vk","website","youtube","a","updateProfile","userId","checked","isValid","length","index","color","ProfileStatus","isOwner","status","updateStatus","x","editMode","setEditMode","inputStatus","initialValue","setValue","target","useInput","maxWidth","autoFocus","type","placement","EditOutlined","marginLeft","ProfileDescription","profileContacts","entries","href","whiteSpace","rel","bordered","Item","label","ProfileInfo","history","useHistory","params","useParams","auth","useEffect","getUserProfile","getStatus","push","forEach","error","cover","rotate","withCredentials","info","file","response","data","savePhotoSuccess","success","headers","apiKey","showUploadList","icon","UploadOutlined","Profile"],"mappings":"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","file":"static/js/6.26be0c80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3BStp\",\"posts\":\"MyPosts_posts__2Eaxb\"};","import React, { useState } from 'react';\r\nimport { Comment, Tooltip, Avatar } from 'antd';\r\nimport moment from 'moment';\r\nimport { DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled } from '@ant-design/icons';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../../redux/redux-store';\r\nimport mockPhoto from '../../../../assets/images/avatar.png';\r\n\r\ntype PropsType = {\r\n    message: string;\r\n    likesCount: number;\r\n};\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    const [likes, setLikes] = useState(props.likesCount);\r\n    const [dislikes, setDislikes] = useState(0);\r\n    const [action, setAction] = useState('');\r\n    const userPhoto = useSelector((state: AppStateType) => state.profilePage.profile?.photos?.large);\r\n    const userName = useSelector((state: AppStateType) => state.profilePage.profile?.fullName);\r\n\r\n    const like = () => {\r\n        setLikes((prev) => prev + 1);\r\n        setDislikes(0);\r\n        setAction('liked');\r\n    };\r\n\r\n    const dislike = () => {\r\n        setLikes(props.likesCount);\r\n        setDislikes(1);\r\n        setAction('disliked');\r\n    };\r\n\r\n    const actions = [\r\n        <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n            <span onClick={like}>\r\n                {action === 'liked' ? <LikeFilled /> : <LikeOutlined />}\r\n                <span className=\"comment-action\">{likes}</span>\r\n            </span>\r\n        </Tooltip>,\r\n        <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n            <span onClick={dislike}>\r\n                {action === 'disliked' ? <DislikeFilled /> : <DislikeOutlined />}\r\n                <span className=\"comment-action\">{dislikes}</span>\r\n            </span>\r\n        </Tooltip>\r\n    ];\r\n\r\n    return (\r\n        <Comment\r\n            actions={actions}\r\n            author={userName}\r\n            avatar={<Avatar src={userPhoto || mockPhoto} alt=\"photo\" />}\r\n            content={<p>{props.message}</p>}\r\n            datetime={\r\n                <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n                    <span>{moment().fromNow()}</span>\r\n                </Tooltip>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import { useFormik } from 'formik';\r\nimport { PostType } from '../../../types/types';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Button, Skeleton } from 'antd';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actions } from '../../../redux/profile-reducer';\r\n\r\nconst MyPosts: React.FC = () => {\r\n    const profile = useSelector((state: AppStateType) => state.profilePage.profile);\r\n    const posts = useSelector((state: AppStateType) => state.profilePage.posts);\r\n\r\n    const postsElements = posts.map((p: PostType, i: number) => (\r\n        <Post message={p.message} likesCount={p.likesCount} key={i} />\r\n    ));\r\n\r\n    if (!profile) {\r\n        return <Skeleton avatar active style={{ position: 'absolute', bottom: 100 }} />;\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostForm />\r\n            </div>\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype PostFormValues = {\r\n    post: string;\r\n};\r\n\r\nconst PostForm: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        onSubmit: (values: PostFormValues, { resetForm }) => {\r\n            dispatch(actions.addPost(values.post));\r\n            resetForm();\r\n        }\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <Textarea\r\n                name={'post'}\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.post}\r\n                placeholder={'Enter your post'}\r\n            />\r\n            <div>\r\n                <Button disabled={!formik.dirty} htmlType=\"submit\">\r\n                    Add post\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MyPosts;\r\n","import { useFormik } from 'formik';\nimport { ContactsType, ProfileType } from '../../../types/types';\nimport { BaseInput, InputLow } from '../../common/FormsControls/FormsControls';\nimport { Button, Checkbox } from 'antd';\nimport { updateProfile } from '../../../redux/profile-reducer';\nimport { useDispatch } from 'react-redux';\n\ntype ProfileDescriptionFormPropsType = {\n    profile: ProfileType;\n    authorizedUserId: number | null;\n    errors: string[];\n    closeEditMode: () => void;\n};\n\ntype ProfileDescriptionFormValuesType = {\n    fullName: string;\n    aboutMe: string;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    contacts: ContactsType;\n};\n\nconst ProfileDescriptionForm: React.FC<ProfileDescriptionFormPropsType> = ({\n    closeEditMode,\n    profile,\n    authorizedUserId,\n    errors\n}) => {\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            fullName: profile.fullName,\n            aboutMe: profile.aboutMe,\n            lookingForAJob: profile.lookingForAJob,\n            lookingForAJobDescription: profile.lookingForAJobDescription,\n            contacts: {\n                facebook: profile.contacts.facebook,\n                github: profile.contacts.github,\n                instagram: profile.contacts.instagram,\n                mainLink: profile.contacts.mainLink,\n                twitter: profile.contacts.twitter,\n                vk: profile.contacts.vk,\n                website: profile.contacts.website,\n                youtube: profile.contacts.youtube\n            }\n        },\n        onSubmit: async (values: ProfileDescriptionFormValuesType) => {\n            if (authorizedUserId) {\n                await dispatch(updateProfile({ ...values, userId: authorizedUserId }));\n                closeEditMode();\n            }\n        }\n    });\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <BaseInput\n                title={'Имя'}\n                name={'fullName'}\n                onChange={formik.handleChange}\n                value={formik.values.fullName}\n                placeholder={'fullName'}\n            />\n            <BaseInput\n                title={'Обо мне'}\n                name={'aboutMe'}\n                onChange={formik.handleChange}\n                value={formik.values.aboutMe}\n                placeholder={'aboutMe'}\n            />\n            <Checkbox\n                onChange={formik.handleChange}\n                checked={formik.values.lookingForAJob}\n                name={'lookingForAJob'}\n            >\n                looking For A Job\n            </Checkbox>\n            {formik.values.lookingForAJob && (\n                <BaseInput\n                    title={'Описание для поиска работы'}\n                    name={'lookingForAJobDescription'}\n                    onChange={formik.handleChange}\n                    value={formik.values.lookingForAJobDescription}\n                    placeholder={'looking For A Job Description'}\n                />\n            )}\n            <Contacts contacts={formik.values.contacts} onChange={formik.handleChange} errors={errors} />\n            <div>\n                <Button disabled={!formik.isValid} htmlType={'submit'}>\n                    Save\n                </Button>\n            </div>\n            {!!errors.length &&\n                errors.map((err: string, index: number) => (\n                    <div key={index} style={{ color: 'red' }}>\n                        <strong>Ошибка: </strong>\n                        {err}\n                    </div>\n                ))}\n        </form>\n    );\n};\n\ntype ContactsPropsType = {\n    contacts: any;\n    onChange: any;\n    errors: string[];\n};\n\nconst Contacts: React.FC<ContactsPropsType> = ({ contacts, onChange, errors }) => {\n    const err = errors.map((e: string) => {\n        return e.split('->')[1]?.replace(')', '').toLowerCase();\n    });\n\n    return (\n        <div>\n            {Object.keys(contacts).map((contact) => (\n                <InputLow\n                    key={contact}\n                    title={contact}\n                    isError={err.some((e: string | null) => e === contact.toLowerCase())}\n                    name={`contacts.${contact}`}\n                    onChange={onChange}\n                    value={contacts[contact]}\n                    placeholder={contact}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default ProfileDescriptionForm;\n","import React, { useState } from 'react';\nimport { Input, Tooltip } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { EditOutlined } from '@ant-design/icons';\nimport { useInput } from '../../../Hooks/useInput';\n\ntype PropsType = {\n    isOwner?: boolean;\n    status: string;\n    updateStatus?: (status: string) => void;\n};\nconst ProfileStatus: React.FC<PropsType> = ({ isOwner = false, status, updateStatus = (x) => x }) => {\n    const [editMode, setEditMode] = useState(false);\n    const dispatch = useDispatch();\n\n    const inputStatus = useInput(status);\n\n    const activateEditMode = () => {\n        if (!isOwner) {\n            return;\n        }\n        setEditMode(true);\n    };\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        dispatch(updateStatus(inputStatus.value));\n    };\n\n    return (\n        <div>\n            {editMode ? (\n                <div>\n                    <strong>Status:</strong>{' '}\n                    <Input\n                        {...inputStatus}\n                        onBlur={deactivateEditMode}\n                        style={{ maxWidth: 400 }}\n                        autoFocus\n                        type=\"text\"\n                    />\n                </div>\n            ) : (\n                <div>\n                    <span>\n                        <strong>Status:</strong> {status || 'Нет статуса'}\n                    </span>\n                    {isOwner && (\n                        <Tooltip placement=\"right\" title={'Edit status'}>\n                            <EditOutlined style={{ marginLeft: 10 }} onClick={activateEditMode} />\n                        </Tooltip>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ProfileStatus;\n","import { useState } from 'react';\n\nexport const useInput = (initialValue: string) => {\n    const [value, setValue] = useState(initialValue);\n\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(e.target.value);\n    };\n\n    return {\n        value,\n        onChange\n    };\n};\n","import React, { useEffect, useState } from 'react';\r\nimport userPhoto from '../../../assets/images/avatar.png';\r\nimport { ProfileType } from '../../../types/types';\r\nimport ProfileDescriptionForm from './ProfileDescriptionForm';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { actions, getStatus, getUserProfile, updateStatus } from '../../../redux/profile-reducer';\r\nimport { Card, Button, Upload, Divider, Image, message, Skeleton, Descriptions } from 'antd';\r\nimport { UploadChangeParam } from 'antd/lib/upload';\r\nimport { UploadFile } from 'antd/lib/upload/interface';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport ImgCrop from 'antd-img-crop';\r\nimport { apiKey } from '../../../api/api';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\nconst ProfileInfo: React.FC = () => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params = useParams<{ userId?: string }>();\r\n    const profile = useSelector((state: AppStateType) => state.profilePage.profile);\r\n    const authorizedUserId = useSelector((state: AppStateType) => state.auth.userId);\r\n    const errors = useSelector((state: AppStateType) => state.profilePage.errors);\r\n\r\n    useEffect(() => {\r\n        const userId = params?.userId ?? authorizedUserId;\r\n        if (!userId) {\r\n            history.push('/login');\r\n        } else {\r\n            dispatch(getUserProfile(userId as number));\r\n            dispatch(getStatus(userId as number));\r\n        }\r\n    }, [authorizedUserId, dispatch, history, params.userId]);\r\n\r\n    useEffect(() => {\r\n        if (errors.length) {\r\n            setEditMode(true);\r\n        }\r\n        errors.forEach((err) => {\r\n            message.error(err);\r\n        });\r\n    }, [errors]);\r\n\r\n    const onMainPhotoSelected = (info: UploadChangeParam<UploadFile<any>>) => {\r\n        if (info.file.response?.data?.photos) {\r\n            dispatch(actions.savePhotoSuccess(info.file.response?.data?.photos));\r\n            message.success('New photo is uploaded');\r\n        }\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Skeleton active />;\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            style={{ maxWidth: '100%' }}\r\n            cover={\r\n                <div>\r\n                    <Image style={{ maxWidth: '300px' }} src={profile?.photos?.large || userPhoto} />\r\n                </div>\r\n            }\r\n            actions={[\r\n                <div>\r\n                    {!params?.userId && !editMode && (\r\n                        <Button onClick={() => setEditMode(true)}>Edit profile</Button>\r\n                    )}\r\n                </div>\r\n            ]}\r\n        >\r\n            {!params?.userId && editMode && (\r\n                // <input type={'file'} accept=\".png, .jpg, .jpeg\" onChange={onMainPhotoSelected1} />\r\n                <>\r\n                    <ImgCrop rotate>\r\n                        <Upload\r\n                            withCredentials\r\n                            action=\"https://social-network.samuraijs.com/api/1.0/profile/photo\"\r\n                            onChange={onMainPhotoSelected}\r\n                            headers={{ 'API-KEY': apiKey }}\r\n                            showUploadList={false}\r\n                        >\r\n                            <Button icon={<UploadOutlined />}>Upload new photo</Button>\r\n                        </Upload>\r\n                    </ImgCrop>\r\n                    <Divider />\r\n                </>\r\n            )}\r\n            {!editMode ? (\r\n                <>\r\n                    <ProfileDescription profile={profile} isOwner={!params?.userId} />\r\n                </>\r\n            ) : (\r\n                <ProfileDescriptionForm\r\n                    errors={errors}\r\n                    authorizedUserId={authorizedUserId}\r\n                    profile={profile}\r\n                    closeEditMode={() => {\r\n                        setEditMode(false);\r\n                    }}\r\n                />\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\ntype ProfileDescriptionPropsType = {\r\n    profile: ProfileType;\r\n    isOwner: boolean;\r\n};\r\n\r\nconst ProfileDescription: React.FC<ProfileDescriptionPropsType> = ({ profile, isOwner }) => {\r\n    const status = useSelector((state: AppStateType) => state.profilePage.status);\r\n\r\n    const profileContacts = Object.entries(profile?.contacts).map(\r\n        (contact: Array<string | null>, index: number) => {\r\n            const [name, value] = contact;\r\n            return (\r\n                value && (\r\n                    <div key={index}>\r\n                        <a href={value} target=\"_blank\" style={{ whiteSpace: 'nowrap' }} rel=\"noreferrer\">\r\n                            {name}\r\n                        </a>\r\n                    </div>\r\n                )\r\n            );\r\n        }\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <ProfileStatus isOwner={isOwner} status={status} updateStatus={updateStatus} />\r\n            <Descriptions bordered>\r\n                <Descriptions.Item style={{ whiteSpace: 'nowrap' }} label=\"Name\">\r\n                    {profile?.fullName}\r\n                </Descriptions.Item>\r\n                {profile?.aboutMe && (\r\n                    <Descriptions.Item label=\"About me\">{profile?.aboutMe}</Descriptions.Item>\r\n                )}\r\n                {profile?.lookingForAJob && (\r\n                    <Descriptions.Item label=\"Looking for a job description\">\r\n                        {profile?.lookingForAJobDescription}\r\n                    </Descriptions.Item>\r\n                )}\r\n                {profileContacts.some((p) => !!p) && (\r\n                    <Descriptions.Item label=\"Contacts\">{profileContacts}</Descriptions.Item>\r\n                )}\r\n            </Descriptions>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import MyPosts from '../components/Profile/MyPosts/MyPosts';\r\nimport ProfileInfo from '../components/Profile/ProfileInfo/ProfileInfo';\r\n\r\nconst Profile: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo />\r\n            <MyPosts />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n"],"sourceRoot":""}