{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileDescriptionForm.tsx","../node_modules/@ant-design/icons-svg/es/asn/EditOutlined.js","../node_modules/@ant-design/icons/es/icons/EditOutlined.js","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","pages/Profile.tsx"],"names":["module","exports","Post","props","className","s","item","src","alt","message","likesCount","PostForm","formik","useFormik","initialValues","post","onSubmit","values","resetForm","addNewPost","handleSubmit","name","onBlur","handleBlur","onChange","handleChange","value","placeholder","disabled","dirty","htmlType","MyPosts","postsElements","posts","map","p","i","postsBlock","addPost","connect","state","profilePage","newPostText","actions","Contacts","contacts","err","errors","e","split","replace","toLowerCase","Object","keys","contact","title","isError","some","ProfileDescriptionForm","profile","closeEditMode","authorizedUserId","dispatch","useDispatch","examValue","length","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","facebook","github","instagram","mainLink","twitter","vk","website","youtube","a","updateProfile","userId","checked","type","index","style","color","EditOutlined","ref","React","AntdIcon","_objectSpread","icon","EditOutlinedSvg","displayName","ProfileStatus","isOwner","status","useSelector","useState","editMode","setEditMode","profileStatus","setStatus","useEffect","target","updateStatus","autoFocus","marginLeft","onClick","ProfileDescription","goToEditMode","profileContacts","entries","ProfileInfo","history","useHistory","params","useParams","auth","getUserProfile","getStatus","push","avatar","width","photos","large","accept","files","savePhoto","Preloader","Profile","MyPostsContainer"],"mappings":"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","file":"static/js/3.e0de98fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3BStp\",\"posts\":\"MyPosts_posts__2Eaxb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1myGU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__1Tzcz\"};","import s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string;\r\n    likesCount: number;\r\n};\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://cdn-icons-png.flaticon.com/512/149/149071.png\" alt=\"user\" />\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n","import { useFormik } from 'formik';\r\nimport { PostType } from '../../../types/types';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Button } from 'antd';\r\n\r\ntype MyPostsPropsType = {\r\n    posts: PostType[];\r\n    newPostText: string;\r\n    addPost: (post: string) => void;\r\n};\r\nconst MyPosts: React.FC<MyPostsPropsType> = (props) => {\r\n    const postsElements = props.posts.map((p: PostType, i: number) => (\r\n        <Post message={p.message} likesCount={p.likesCount} key={i} />\r\n    ));\r\n\r\n    const addNewPost = (values: PostFormValues) => {\r\n        props.addPost(values.post);\r\n    };\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <PostForm addNewPost={addNewPost} />\r\n            </div>\r\n            <div className={s.posts}>{postsElements}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype PostFormValues = {\r\n    post: string;\r\n};\r\n\r\ntype PostFormPropsType = {\r\n    addNewPost: (values: PostFormValues) => void;\r\n};\r\n\r\nconst PostForm: React.FC<PostFormPropsType> = (props) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        onSubmit: (values: PostFormValues, { resetForm }) => {\r\n            props.addNewPost(values);\r\n            resetForm();\r\n        }\r\n    });\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <Textarea\r\n                name={'post'}\r\n                onBlur={formik.handleBlur}\r\n                onChange={formik.handleChange}\r\n                value={formik.values.post}\r\n                placeholder={'Enter your post'}\r\n            />\r\n            <div>\r\n                <Button disabled={!formik.dirty} htmlType=\"submit\">\r\n                    Add post\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MyPosts;\r\n","import { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types/types';\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    };\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostType[];\r\n    newPostText: string;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (post: string) => void;\r\n};\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, unknown, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPost\r\n})(MyPosts);\r\n","import { useFormik } from 'formik';\nimport { ContactsType, ProfileType } from '../../../types/types';\nimport { BaseInput, InputLow } from '../../common/FormsControls/FormsControls';\nimport { Button } from 'antd';\nimport { updateProfile } from '../../../redux/profile-reducer';\nimport { useDispatch } from 'react-redux';\n\ntype ProfileDescriptionFormPropsType = {\n    profile: ProfileType;\n    authorizedUserId: number | null;\n    errors: string[];\n    closeEditMode: () => void;\n};\n\ntype ProfileDescriptionFormValuesType = {\n    fullName: string;\n    aboutMe: string;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    contacts: ContactsType;\n};\n\nconst ProfileDescriptionForm: React.FC<ProfileDescriptionFormPropsType> = ({\n    profile,\n    closeEditMode,\n    authorizedUserId,\n    errors\n}) => {\n    const dispatch = useDispatch();\n    const examValue = (value: string) => {\n        return value.length ? value : '';\n    };\n\n    const formik = useFormik({\n        initialValues: {\n            fullName: profile.fullName,\n            aboutMe: examValue(profile.aboutMe),\n            lookingForAJob: profile.lookingForAJob,\n            lookingForAJobDescription: examValue(profile.lookingForAJobDescription),\n            contacts: {\n                facebook: examValue(profile.contacts.facebook),\n                github: examValue(profile.contacts.github),\n                instagram: examValue(profile.contacts.instagram),\n                mainLink: examValue(profile.contacts.mainLink),\n                twitter: examValue(profile.contacts.twitter),\n                vk: examValue(profile.contacts.vk),\n                website: examValue(profile.contacts.website),\n                youtube: examValue(profile.contacts.youtube)\n            }\n        },\n        onSubmit: async (values: ProfileDescriptionFormValuesType) => {\n            if (authorizedUserId) {\n                await dispatch(updateProfile({ ...values, userId: authorizedUserId }));\n                closeEditMode();\n            }\n        }\n    });\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <BaseInput\n                title={'Имя'}\n                name={'fullName'}\n                onChange={formik.handleChange}\n                value={formik.values.fullName}\n                placeholder={'fullName'}\n            />\n            <BaseInput\n                title={'Обо мне'}\n                name={'aboutMe'}\n                onChange={formik.handleChange}\n                value={formik.values.aboutMe}\n                placeholder={'aboutMe'}\n            />\n            <input\n                name={'lookingForAJob'}\n                checked={formik.values.lookingForAJob}\n                onChange={formik.handleChange}\n                type={'checkbox'}\n            />{' '}\n            looking For A Job\n            {formik.values.lookingForAJob && (\n                <BaseInput\n                    title={'Описание для поиска работы'}\n                    name={'lookingForAJobDescription'}\n                    onChange={formik.handleChange}\n                    value={formik.values.lookingForAJobDescription}\n                    placeholder={'looking For A Job Description'}\n                />\n            )}\n            <Contacts contacts={formik.values.contacts} onChange={formik.handleChange} errors={errors} />\n            <div>\n                <Button htmlType={'submit'}>Send</Button>\n            </div>\n            {!!errors.length &&\n                errors.map((err: string, index: number) => (\n                    <div key={index} style={{ color: 'red' }}>\n                        <strong>Ошибка: </strong>\n                        {err}\n                    </div>\n                ))}\n        </form>\n    );\n};\n\ntype ContactsPropsType = {\n    contacts: any;\n    onChange: any;\n    errors: string[];\n};\n\nconst Contacts: React.FC<ContactsPropsType> = ({ contacts, onChange, errors }) => {\n    const err = errors.map((e: string) => {\n        return e.split('->')[1].replace(')', '').toLowerCase();\n    });\n\n    return (\n        <div>\n            {Object.keys(contacts).map((contact) => (\n                <InputLow\n                    key={contact}\n                    title={contact}\n                    isError={err.some((e: string) => e === contact.toLowerCase())}\n                    name={`contacts.${contact}`}\n                    onChange={onChange}\n                    value={contacts[contact]}\n                    placeholder={contact}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default ProfileDescriptionForm;\n","// This icon file is generated automatically.\nvar EditOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\" } }] }, \"name\": \"edit\", \"theme\": \"outlined\" };\nexport default EditOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EditOutlinedSvg from \"@ant-design/icons-svg/es/asn/EditOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar EditOutlined = function EditOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EditOutlinedSvg\n  }));\n};\n\nEditOutlined.displayName = 'EditOutlined';\nexport default /*#__PURE__*/React.forwardRef(EditOutlined);","import React, { useEffect, useState } from 'react';\nimport { Input } from 'antd';\nimport { updateStatus } from '../../../redux/profile-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppStateType } from '../../../redux/redux-store';\nimport { EditOutlined } from '@ant-design/icons';\n\ntype PropsType = {\n    isOwner?: boolean;\n};\nconst ProfileStatus: React.FC<PropsType> = ({ isOwner = false }) => {\n    const status = useSelector((state: AppStateType) => state.profilePage.status);\n    const [editMode, setEditMode] = useState(false);\n    const [profileStatus, setStatus] = useState(status);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        setStatus(status);\n    }, [status]);\n\n    const activateEditMode = () => {\n        if (!isOwner) {\n            return;\n        }\n        setEditMode(true);\n    };\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        dispatch(updateStatus(profileStatus));\n    };\n\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.target.value);\n    };\n\n    return (\n        <div>\n            {editMode ? (\n                <div>\n                    Статус:{' '}\n                    <Input\n                        onChange={onStatusChange}\n                        onBlur={deactivateEditMode}\n                        autoFocus\n                        type=\"text\"\n                        value={profileStatus}\n                    />\n                </div>\n            ) : (\n                <div>\n                    <span>\n                        <strong>Статус:</strong> {status || 'Нет статуса'}\n                    </span>\n                    <EditOutlined style={{ marginLeft: '10px' }} onClick={activateEditMode} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ProfileStatus;\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { ProfileType } from '../../../types/types';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileDescriptionForm from './ProfileDescriptionForm';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport { Button } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { getStatus, getUserProfile, savePhoto } from '../../../redux/profile-reducer';\r\n\r\nconst ProfileInfo: React.FC = () => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const params = useParams<{ userId?: string }>();\r\n    const profile = useSelector((state: AppStateType) => state.profilePage.profile);\r\n    const authorizedUserId = useSelector((state: AppStateType) => state.auth.userId);\r\n    const errors = useSelector((state: AppStateType) => state.profilePage.errors);\r\n\r\n    useEffect(() => {\r\n        const userId = params?.userId ?? authorizedUserId;\r\n        if (!userId) {\r\n            history.push('/login');\r\n        } else {\r\n            dispatch(getUserProfile(userId as number));\r\n            dispatch(getStatus(userId as number));\r\n        }\r\n    }, [authorizedUserId, dispatch, history, params.userId]);\r\n\r\n    useEffect(() => {\r\n        if (errors.length) {\r\n            setEditMode(true);\r\n        }\r\n    }, [errors, authorizedUserId, errors.length]);\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            dispatch(savePhoto(e.target.files[0]));\r\n        }\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Preloader />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avatar}>\r\n                <img\r\n                    style={{ width: '300px' }}\r\n                    src={\r\n                        profile?.photos?.large ||\r\n                        'https://www.kindpng.com/picc/m/130-1300217_user-icon-member-icon-png-transparent-png.png'\r\n                    }\r\n                    alt=\"avatar\"\r\n                />\r\n                {!params?.userId && editMode && (\r\n                    <input type={'file'} accept=\".png, .jpg, .jpeg\" onChange={onMainPhotoSelected} />\r\n                )}\r\n            </div>\r\n            {!editMode ? (\r\n                <ProfileDescription\r\n                    profile={profile}\r\n                    isOwner={!params?.userId}\r\n                    goToEditMode={() => setEditMode(true)}\r\n                />\r\n            ) : (\r\n                <ProfileDescriptionForm\r\n                    errors={errors}\r\n                    authorizedUserId={authorizedUserId}\r\n                    profile={profile}\r\n                    closeEditMode={() => setEditMode(false)}\r\n                />\r\n            )}\r\n            <ProfileStatus isOwner={!params?.userId} />\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDescriptionPropsType = {\r\n    profile: ProfileType;\r\n    isOwner: boolean;\r\n    goToEditMode: () => void;\r\n};\r\n\r\nconst ProfileDescription: React.FC<ProfileDescriptionPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n    const profileContacts = Object.entries(profile?.contacts).map((contact: string[], index: number) => {\r\n        return contact[1] ? (\r\n            <li key={index}>\r\n                <strong>{contact[0]}: </strong>\r\n                {contact[1]}\r\n            </li>\r\n        ) : (\r\n            false\r\n        );\r\n    });\r\n\r\n    return (\r\n        <form>\r\n            {isOwner && <Button onClick={goToEditMode}>Edit profile</Button>}\r\n            <p>\r\n                <strong>Имя:</strong> {profile?.fullName}\r\n            </p>\r\n            {profile?.aboutMe && (\r\n                <p>\r\n                    <strong>Обо мне: </strong>\r\n                    {profile?.aboutMe}\r\n                </p>\r\n            )}\r\n            {profile?.lookingForAJob && (\r\n                <p>\r\n                    <strong>В поиске работы: </strong>\r\n                    {profile?.lookingForAJobDescription}\r\n                </p>\r\n            )}\r\n            {<ul>{profileContacts}</ul>}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import MyPostsContainer from '../components/Profile/MyPosts/MyPostsContainer';\r\nimport ProfileInfo from '../components/Profile/ProfileInfo/ProfileInfo';\r\n\r\nconst Profile: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n"],"sourceRoot":""}